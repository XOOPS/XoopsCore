<?php
namespace Xmf\Key;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-06 at 23:04:02.
 */
 
/**
* PHPUnit special settings :
* @backupGlobals disabled
* @backupStaticAttributes disabled
*/
class KeyAbstractTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var StorageInterface
     */
    protected $storage;

    /**
     * @var KeyAbstract
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->storage = new ArrayStorage();
        $this->object = $this->getMockForAbstractClass('Xmf\Key\KeyAbstract', array($this->storage, 'test'));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Xmf\Key\KeyAbstract::__construct
     */
    public function testConstruct()
    {
        $this->assertInstanceOf('\Xmf\Key\KeyAbstract', $this->object);

        $class = new \ReflectionClass('\Xmf\Key\KeyAbstract');
        $method = $class->getMethod('__construct');
        $this->assertFalse($method->isAbstract());
    }

    /**
     * @covers Xmf\Key\KeyAbstract::getSigning
     * @covers Xmf\Key\KeyAbstract::getVerifying
     * @covers Xmf\Key\KeyAbstract::create
     * @covers Xmf\Key\KeyAbstract::kill
     */
    public function testMethodsExist()
    {
        $this->assertTrue(method_exists($this->object, 'getSigning'));
        $this->assertTrue(method_exists($this->object, 'getVerifying'));
        $this->assertTrue(method_exists($this->object, 'create'));
        $this->assertTrue(method_exists($this->object, 'kill'));
    }
}
