<?php
namespace Xmf\Key;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-02-06 at 23:01:54.
 */
 
/**
* PHPUnit special settings :
* @backupGlobals disabled
* @backupStaticAttributes disabled
*/
class BasicTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var StorageInterface
     */
    protected $storage;

    /**
     * @var Basic
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->storage = new ArrayStorage();
        $this->object = new Basic($this->storage, 'test');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Xmf\Key\Basic::getSigning
     */
    public function testGetSigning()
    {
        $actual = $this->object->getSigning();
        $this->assertEmpty($actual);
        $actual = $this->object->create();
        $this->assertTrue($actual);
        $actual = $this->object->getSigning();
        $this->assertTrue(is_string($actual));
        $this->assertRegExp('/^[0-9a-f]{128}$/', $actual);
    }

    /**
     * @covers Xmf\Key\Basic::getVerifying
     */
    public function testGetVerifying()
    {
        $actual = $this->object->getVerifying();
        $this->assertEmpty($actual);
        $actual = $this->object->create();
        $this->assertTrue($actual);
        $actual = $this->object->getVerifying();
        $this->assertTrue(is_string($actual));
        $this->assertRegExp('/^[0-9a-f]{128}$/', $actual);
    }

    /**
     * @covers Xmf\Key\Basic::create
     */
    public function testCreate()
    {
        $actual = $this->object->create();
        $this->assertTrue($actual);

        $actual = $this->object->create();
        $this->assertFalse($actual);
    }

    /**
     * @covers Xmf\Key\Basic::kill
     */
    public function testKill()
    {
        $actual = $this->object->create();
        $this->assertTrue($actual);

        $this->assertTrue($this->storage->exists('test'));

        $actual = $this->object->kill();
        $this->assertTrue($actual);

        $this->assertFalse($this->storage->exists('test'));
    }
}
