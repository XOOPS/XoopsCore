<?php
require_once(dirname(__FILE__).'/../../init_new.php');

/*
 * Generated by PHPUnit_SkeletonGenerator on 2015-04-04 at 10:44:18.
 */

/**
 * PHPUnit special settings :
 * @backupGlobals disabled
 * @backupStaticAttributes disabled
 */

class XoopsFolderHandlerTest extends \PHPUnit_Framework_TestCase
{
    protected $myClass = 'XoopsFolderHandler';

    /**
     * @var XoopsFolderHandler
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new XoopsFolderHandler();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    public function test___construct()
	{
		$instance = new $this->myClass();
		$this->assertInstanceOf($this->myClass, $instance);
    }
    
    /**
     * @expectedException InvalidArgumentException
     */
    public function test___construct100()
	{       
        $instance = new $this->myClass('dir_not_exists',false);
    }

    public function test___publicProperties()
	{
		$items = array('path', 'sort', 'mode');
		foreach($items as $item) {
			$prop = new ReflectionProperty($this->myClass,$item);
			$this->assertTrue($prop->isPublic());
		}
    }

    /**
     * @covers XoopsFolderHandler::pwd
     */
    public function testPwd()
    {
		$dir = dirname(__FILE__);
		$instance = new $this->myClass($dir, false, false);
		$this->assertTrue(file_exists($dir));
		$pwd = $instance->pwd();
		$this->assertSame($dir,$pwd);

		$dir = \XoopsBaseConfig::get('var-path') . '/caches/xoops_cache';
        $dir = str_replace('/',DIRECTORY_SEPARATOR, str_replace('\\','/',$dir));
		$instance = new $this->myClass('', false, false);
		$pwd = $instance->pwd();
		$this->assertSame($dir,$pwd);
    }

    /**
     * @covers XoopsFolderHandler::cd
     */
    public function testCd()
    {
		$dir = dirname(__FILE__);
		$instance = new $this->myClass($dir, false, false);
		$this->assertTrue(file_exists($dir));
		$cd = $instance->cd($dir);
		$this->assertSame($dir,$cd);

		$dir = dirname(__FILE__);
        $instance = new $this->myClass($dir, false, false);
        $this->assertTrue(file_exists($dir));
        try {
            $cd = $instance->cd($dir);
            $this->assertFalse($cd);
        }
        catch (Exception $ex) {
            $this->assertTrue(true);
        }
    }

    /**
     * @covers XoopsFolderHandler::read
     */
    public function testRead()
    {
		$dir = dirname(__FILE__);
		$instance = new $this->myClass($dir, false, false);
		$this->assertTrue(file_exists($dir));
		$value = $instance->read();
        $this->assertTrue(is_array($value[0]));
        $this->assertTrue(is_array($value[1]));
        $this->assertTrue(in_array(basename(__FILE__),$value[1],true));

		$value = $instance->read(false);
        $this->assertTrue(is_array($value[0]));
        $this->assertTrue(is_array($value[1]));
        $this->assertTrue(in_array(basename(__FILE__),$value[1],true));

		$file = dirname(__FILE__) . '/.dummy';
		@unlink($file);
		$str = "a string for test";
		$result = file_put_contents($file, $str);
		$value = $instance->read(false,true);
        $this->assertTrue(is_array($value[0]));
        $this->assertTrue(is_array($value[1]));
        $this->assertTrue(in_array(basename(__FILE__),$value[1],true));
        $this->assertFalse(in_array('.dummy',$value[1],true));

		$value = $instance->read(false,false);
        $this->assertTrue(in_array('.dummy',$value[1],true));
		@unlink($file);
    }

    /**
     * @covers XoopsFolderHandler::find
     */
    public function testFind()
    {
		$dir = dirname(__FILE__);
		$instance = new $this->myClass($dir, false, false);
		$this->assertTrue(file_exists($dir));
		$value = $instance->find('.*Test.php');
        $this->assertTrue(is_array($value));

		$value = $instance->find('.*Test.php', true);
        $this->assertTrue(is_array($value));

		$value = $instance->find('.*TestDoesntExists.php');
        $this->assertSame(array(), $value);
    }

    /**
     * @covers XoopsFolderHandler::findRecursive
     */
    public function testFindRecursive()
    {
		$dir = dirname(__FILE__).'/../';
		$instance = new $this->myClass($dir, false, false);
		$this->assertTrue(file_exists($dir));
        $value = $instance->findRecursive('.*Test.php', true);
        $this->assertTrue(is_array($value));
    }

    /**
     * @covers XoopsFolderHandler::isWindowsPath
     */
    public function testIsWindowsPath()
    {
		$class = $this->myClass;
		$result = $class::isWindowsPath("C:\\Windows\\Temp");
		$this->assertTrue($result);
		$result = $class::isWindowsPath('unixRelativePath/test/test');
		$this->assertFalse($result);
		$result = $class::isWindowsPath('/unixAbsolutePath/test/test');
		$this->assertFalse($result);
    }

    /**
     * @covers XoopsFolderHandler::isAbsolute
     */
    public function testIsAbsolute()
    {
		$class = $this->myClass;
		$dir = dirname(__FILE__);
		$result = $class::isAbsolute($dir);
		$this->assertTrue($result);
		$result = $class::isAbsolute('/unixAbsolutePath/test/test');
		$this->assertTrue($result);
		$result = $class::isAbsolute('relativePath/test/test');
		$this->assertFalse($result);
		$result = $class::isAbsolute('relativePath\test\test');
		$this->assertFalse($result);
    }

    /**
     * @covers XoopsFolderHandler::normalizePath
     */
    public function testNormalizePath()
    {
		$class = $this->myClass;
		$dir = "C:\\Windows\\Temp";
		$result = $class::isWindowsPath($dir);
		$this->assertTrue($result);
		$result = $class::normalizePath($dir);
		$this->assertSame('\\', $result);

		$dir = 'unixRelativePath/test/test';
		$result = $class::isWindowsPath($dir);
		$this->assertFalse($result);
		$result = $class::normalizePath($dir);
		$this->assertSame('/', $result);
    }

    /**
     * @covers XoopsFolderHandler::correctSlashFor
     */
    public function testCorrectSlashFor()
    {
		$class = $this->myClass;
		$dir = "C:\\Windows\\Temp";
		$result = $class::isWindowsPath($dir);
		$this->assertTrue($result);
		$result = $class::correctSlashFor($dir);
		$this->assertSame('\\', $result);

		$dir = 'unixRelativePath/test/test';
		$result = $class::isWindowsPath($dir);
		$this->assertFalse($result);
		$result = $class::correctSlashFor($dir);
		$this->assertSame('/', $result);
    }

    /**
     * @covers XoopsFolderHandler::slashTerm
     */
    public function testSlashTerm()
    {
		$class = $this->myClass;
		$dir = dirname(__FILE__);
		$result = $class::slashTerm($dir);
		$this->assertSame($dir.DIRECTORY_SEPARATOR, $result);

		$dir = dirname(__FILE__).'\\';
		$result = $class::slashTerm($dir);
		$this->assertSame($dir, $result);

		$dir = 'unixRelativePath/test/test';
		$result = $class::slashTerm($dir);
		$this->assertSame($dir.'/', $result);

		$dir = 'unixRelativePath/test/test/';
		$result = $class::slashTerm($dir);
		$this->assertSame($dir, $result);
    }

    /**
     * @covers XoopsFolderHandler::addPathElement
     */
    public function testAddPathElement()
    {
		$class = $this->myClass;
		$element = 'element';
		$dir = dirname(__FILE__);
		$result = $class::addPathElement($dir,$element);
		$this->assertSame($dir.DIRECTORY_SEPARATOR.$element, $result);

		$dir = dirname(__FILE__).'\\';
		$result = $class::addPathElement($dir,$element);
		$this->assertSame($dir.$element, $result);

		$dir = 'unixRelativePath/test/test';
		$result = $class::addPathElement($dir,$element);
		$this->assertSame($dir.'/'.$element, $result);

		$dir = 'unixRelativePath/test/test/';
		$result = $class::addPathElement($dir,$element);
		$this->assertSame($dir.$element, $result);
    }

    /**
     * @covers XoopsFolderHandler::inXoopsPath
     */
    public function testInXoopsPath()
    {
		$xoops_root_path = \XoopsBaseConfig::get('root-path');
        $dir = rtrim($xoops_root_path,'/\\') . '/class';
		$instance = new $this->myClass($dir, false, false);
		$this->assertTrue(file_exists($dir));

        $value = $instance->inXoopsPath('class');
        $this->assertTrue($value);
    }

    /**
     * @covers XoopsFolderHandler::inPath
     */
    public function testInPath()
    {
		$dir = dirname(__FILE__);
		$instance = new $this->myClass($dir, false, false);
		$this->assertTrue(file_exists($dir));

        $name = basename($dir);
        $value = $instance->inPath($name);
        $this->assertTrue($value);

        $value = $instance->inPath(__FILE__, true);
        $this->assertTrue($value);
    }

    /**
     * @covers XoopsFolderHandler::chmod
     * @todo   Implement testChmod().
     */
    public function testChmod()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers XoopsFolderHandler::tree
     * @todo   Implement testTree().
     */
    public function testTree()
    {
		$dir = dirname(__FILE__);
		$instance = new $this->myClass($dir, false, false);
		$this->assertTrue(file_exists($dir));

        $value = $instance->tree($instance->path);
        $this->assertTrue(is_array($value));
        $this->assertTrue(is_array($value[0]));
        $this->assertTrue(count($value[0]) > 0);
        $this->assertTrue(is_array($value[1]));
        $this->assertTrue(count($value[1]) > 0);
    }

    /**
     * @covers XoopsFolderHandler::create
     */
    public function testCreate()
    {
		$dir = dirname(__FILE__);
		$instance = new $this->myClass($dir, false, false);
		$this->assertTrue(file_exists($dir));

        $path = 'dummy_dir';
        $value = $instance->create($path);
        $this->assertTrue($value);
        $this->assertTrue(is_array($instance->messages()));
        $this->assertFalse($instance->errors());

        touch($dir.'/'.$path. '/dummy1.tmp');
        touch($dir.'/'.$path. '/dummy2.tmp');

        $value = $instance->delete($path);
        $this->assertTrue($value);
        $this->assertTrue(is_array($instance->messages()));
        $this->assertFalse($instance->errors());
    }

    /**
     * @covers XoopsFolderHandler::dirsize
     */
    public function testDirsize()
    {
		$dir = dirname(__FILE__);
		$instance = new $this->myClass($dir, false, false);
		$this->assertTrue(file_exists($dir));

        $value = $instance->dirsize();
        $this->assertTrue(is_numeric($value));
        $this->assertTrue($value > 0);
    }

    /**
     * @covers XoopsFolderHandler::delete
     */
    public function testDelete()
    {
        // see testCreate
    }

    /**
     * @covers XoopsFolderHandler::copy
     * @todo   Implement testCopy().
     */
    public function testCopy()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers XoopsFolderHandler::move
     * @todo   Implement testMove().
     */
    public function testMove()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers XoopsFolderHandler::messages
     */
    public function testMessages()
    {
		$dir = dirname(__FILE__);
		$instance = new $this->myClass($dir, false, false);
		$this->assertTrue(file_exists($dir));

		$result = $instance->messages();
		$this->assertTrue(is_array($result));
    }

    /**
     * @covers XoopsFolderHandler::errors
     */
    public function testErrors()
    {
		$dir = dirname(__FILE__);
		$instance = new $this->myClass($dir, false, false);
		$this->assertTrue(file_exists($dir));

		$result = $instance->errors();
		$this->assertFalse($result);
    }

    /**
     * @covers XoopsFolderHandler::realpath
     * @todo   Implement testRealpath().
     */
    public function testRealpath()
    {
		$dir = dirname(__FILE__);
        $base = basename(dirname($dir));
		$instance = new $this->myClass($dir, false, false);
		$this->assertTrue(file_exists($dir));

		$result = $instance->realpath($dir.'/../cache');
        $this->assertSame($base, basename(dirname($result)));
    }

    /**
     * @covers XoopsFolderHandler::isSlashTerm
     */
    public function testIsSlashTerm()
    {
		$class = $this->myClass;
		$dir = 'dir\\';
		$result = $class::isSlashTerm($dir);
		$this->assertTrue($result);

		$dir = 'dir/';
		$result = $class::isSlashTerm($dir);
		$this->assertTrue($result);

		$dir = 'dir';
		$result = $class::isSlashTerm($dir);
		$this->assertFalse($result);
    }
}
